#!/bin/bash
function check {
    if [ $? -ne 0 ]
    then
	echo -e "\e[91m!!!!!!!!!!!!! ERROR : $1 !!!!!!!!!!!!!\e[0m"
	popd > /dev/null
	exit 1
    fi    
}

function p {
    echo -e "\e[93m**** $@ \e[0m"
}
		   
script_dir=$(dirname $(readlink -f $0))
pushd . > /dev/null

cd $script_dir/..
version="`cat version.txt | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'`"

#clean output dir
p Windows build
rm -r out/win
output_dir="out/win/clojure-cli"
cargo clean

# compile
p compile
cargo build --release --target=x86_64-pc-windows-gnu
check 'COMPILE ERROR'

#strip
p strip
/usr/x86_64-w64-mingw32/bin/strip target/x86_64-pc-windows-gnu/release/clojure.exe
check 'STRIP ERROR'

#compress exe
upx target/x86_64-pc-windows-gnu/release/clojure.exe
check 'UPX ERROR'

# package
p Packaging...
mkdir -p $output_dir/libexec
cp clojure-tools/clojure-tools-$version.jar $output_dir/libexec
cp clojure-tools/*.edn $output_dir
cp script/clj.cmd $output_dir
mv target/x86_64-pc-windows-gnu/release/clojure.exe $output_dir

# zip
p Zipping...
cd out/win
zip -r clojure-cli-win-$version.zip *
check 'ZIP ERROR'

popd > /dev/null
exit 0

#cross compile stuff
#rustup target add x86_64-pc-windows-gnu

# cd ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/
# mv crt2.o crt2.o.bak
# cp /usr/x86_64-w64-mingw32/lib/crt2.o ./

#cargo build --release --target=x86_64-pc-windows-gnu
